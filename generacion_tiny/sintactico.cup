package Tiny;

import java_cup.runtime.*;
import ast.*;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
    public static void main(String args[]) throws Exception {
        SymbolFactory sf = new DefaultSymbolFactory();
        parser parser_obj;
        if (args.length==0) 
                parser_obj=new parser(new Scanner(System.in,sf),sf);
        else 
                parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

        parser_obj.parse();
        NodoBase root=parser_obj.action_obj.getASTroot();
        System.out.println();
        System.out.println("IMPRESION DEL AST GENERADO");
        System.out.println();
        ast.Util.imprimirAST(root);
        TablaSimbolos ts = new TablaSimbolos();
        ts.cargarTabla(root);
        ts.ImprimirClaves();
        Tiny.Generador.setTablaSimbolos(ts);
        if(args.length==0)
            Tiny.Generador.generarCodigoObjeto(root, null, null);
        else if (args.length==1)
            Tiny.Generador.generarCodigoObjeto(root, args[0], null);
        else
            Tiny.Generador.generarCodigoObjeto(root, args[0], args[1]);
    }

:}

action code {:
    private boolean debug=true;
    private NodoBase ast=null;
    private int lineanum=0;
    
    //Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
    public NodoBase getASTroot(){
        return ast;
    }
    
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal SEMI;
terminal FUNCTION;
terminal RETURN;
terminal COMMA;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase s_stmt_seq;
non terminal NodoBase s_stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase iden;
non terminal NodoBase function_stmt;
non terminal NodoBase arg_list;
non terminal NodoBase call_function;
non terminal NodoBase rule;

/* Precedencia de operadores NO USAR FALLA  
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
*/

/* REGLAS GRAMATICALES */
program ::= stmt_seq:s  {: if(debug) System.out.println("\t regla 1"); 
                            ast = s;
                        :}
;

stmt_seq ::= stmt_seq:ini SEMI stmt:sent    {: if(debug) System.out.println("\t regla 2a"); 
                                                NodoBase hijoActual = ini;
                                                if(hijoActual !=null){
                                                    while(hijoActual.TieneHermano()){
                                                        hijoActual = hijoActual.getHermanoDerecha();
                                                    }
                                                    hijoActual.setHermanoDerecha(sent);
                                                    RESULT=ini;
                                                }else{
                                                    RESULT=sent;
                                                }
                                            :}
            | stmt:sent {: if(debug) System.out.println("\t regla 2b"); 
                            RESULT=sent;
                        :}
;

s_stmt_seq ::= s_stmt_seq:ini SEMI s_stmt:sent  {: if(debug) System.out.println("\t regla 2a"); 
                                                    NodoBase hijoActual = ini;
                                                    if(hijoActual !=null){
                                                        while(hijoActual.TieneHermano()){
                                                            hijoActual = hijoActual.getHermanoDerecha();
                                                        }
                                                        hijoActual.setHermanoDerecha(sent);
                                                        RESULT=ini;
                                                    }else{
                                                        RESULT=sent;
                                                    }
                                                :}
            | s_stmt:sent   {: if(debug) System.out.println("\t regla 2b"); 
                                RESULT=sent;
                            :}
;

stmt ::= if_stmt:sif    {: if(debug) System.out.println("\t regla 3a"); 
                            RESULT=sif;
                        :}
        | repeat_stmt:srep  {: if(debug) System.out.println("\t regla 3b"); 
                                RESULT=srep;
                            :}
        | assign_stmt:sasi  {: if(debug) System.out.println("\t regla 3c"); 
                                RESULT=sasi;
                            :}
        | read_stmt:slec    {: if(debug) System.out.println("\t regla 3d"); 
                                RESULT=slec;
                            :}
        | write_stmt:sesc   {: if(debug) System.out.println("\t regla 3e"); 
                                RESULT=sesc;
                            :}
        | function_stmt:fnt {: if(debug) System.out.println("\t regla 3e"); 
                                RESULT=fnt;
                            :}
        | error {: if(debug) System.out.println("\t regla 3f"); 
                    System.out.println("Ocurrio error en cup # 0004");
                    RESULT=null;
                :}
;

s_stmt ::= if_stmt:sif  {: if(debug) System.out.println("\t regla 3a"); 
                            RESULT=sif;
                        :}
        | repeat_stmt:srep  {: if(debug) System.out.println("\t regla 3b"); 
                                RESULT=srep;
                            :}
        | assign_stmt:sasi  {: if(debug) System.out.println("\t regla 3c"); 
                                RESULT=sasi;
                            :}
        | read_stmt:slec    {: if(debug) System.out.println("\t regla 3d"); 
                                RESULT=slec;
                            :}
        | write_stmt:sesc   {: if(debug) System.out.println("\t regla 3e"); 
                                RESULT=sesc;
                            :}
        | error {: if(debug) System.out.println("\t regla 3f"); 
                    System.out.println("Ocurrio error en cup # 0004");
                    RESULT=null;
                :}
;


if_stmt ::= IF exp:ex THEN s_stmt_seq:pthen END   {: if(debug) System.out.println("\t regla 4a"); 
                                                    RESULT = new NodoIf(ex,pthen);
                                                :}
        | IF exp:ex THEN s_stmt_seq:pthen ELSE s_stmt_seq:pelse END {: if(debug) System.out.println("\t regla 4b"); 
                                                                    RESULT = new NodoIf(ex,pthen,pelse);		
                                                                :}
;

repeat_stmt ::= REPEAT s_stmt_seq:cuerpo UNTIL exp:prueba {: if(debug) System.out.println("\t regla 5"); 
                                                            RESULT = new NodoRepeat(cuerpo,prueba);
                                                        :}
;

assign_stmt ::= iden:id ASSIGN exp:r   {: if(debug) System.out.println("\t regla 6b");
                                            if(id!=null)
                                                RESULT = new NodoAsignacion(id,r);
                                            else{
                                                RESULT = null;
                                                System.out.println("Ocurrio error en cup # 0001");
                                            }
                                        :}
;
        

read_stmt ::= READ iden:id  {: if(debug) System.out.println("\t regla 7"); 
                                    System.out.println("Leyendo Variable");
                                    if(id!=null)
                                        RESULT = new NodoLeer(id);
                                    else{
                                        RESULT = null;
                                        System.out.println("Ocurrio error en cup # 0002");
                                    }
                                :}
;

write_stmt ::= WRITE exp:ex {: if(debug) System.out.println("\t regla 8"); 
                                RESULT= new NodoEscribir(ex);
                            :}
;

exp ::= simple_exp:exI LT simple_exp:exD    {: if(debug) System.out.println("\t regla 9a"); 
                                                RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                                            :} 
        | simple_exp:exI EQ simple_exp:exD  {: if(debug) System.out.println("\t regla 9b"); 
                                                RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
                                            :}
        | simple_exp:ex {: if(debug) System.out.println("\t regla 9c"); 
                            RESULT = ex;
                        :}
;

simple_exp ::= simple_exp:exI PLUS term:exD {: if(debug) System.out.println("\t regla 10a"); 
                                                RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
                                            :}
            | simple_exp:exI MINUS term:exD {: if(debug) System.out.println("\t regla 10b"); 
                                                RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
                                            :}
            | term:ex   {: if(debug) System.out.println("\t regla 10c"); 
                            RESULT=ex;
                        :}
;

term ::= term:exI TIMES factor:exD  {: if(debug) System.out.println("\t regla 11a"); 
                                        RESULT = new NodoOperacion(exI,tipoOp.por,exD);
                                    :}
        | term:exI OVER factor:exD  {: if(debug) System.out.println("\t regla 11b"); 
                                        RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
                                    :}
        | factor:ex {: if(debug) System.out.println("\t regla 11c"); 
                        RESULT=ex;
                    :}
;

factor ::= LPAREN exp:ex RPAREN {: if(debug) System.out.println("\t regla 12a"); 
                                    RESULT = ex;
                                :}
        | NUM:valor {: if(debug) System.out.println("\t regla 12b"); 
                        System.out.println("Devolví un nodo número entero");
                        RESULT= new NodoValor(Integer.parseInt(valor));
                    :}
        | iden:id   {: if(debug) System.out.println("\t regla 12c"); 
                            RESULT = id;
                        :}
        | error {: if(debug) System.out.println("\t regla 12d"); 
                    System.out.println("Ocurrio error en cup # 0003");
                    RESULT=null;
                :}
;

iden ::= ID:id LBRACK simple_exp:ex RBRACK {: if(debug) System.out.println("\t regla 13a");
                                if (id != null && ex != null)
                                    RESULT = new NodoVector(new NodoIdentificador(id.toString()),ex);
                                else{
                                    RESULT = null;
                                    System.out.println("Ocurrio error en cup # 0005");
                                }
                            :}
        | call_function:c {: RESULT = c; :}
        | ID:variable {: if(debug) System.out.println("\t regla 13b"); 
                            if(variable!=null){
                                System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                                RESULT= new NodoIdentificador(variable.toString());		
                            }else{
                                RESULT = null;
                                System.out.println("Ocurrio error en cup # 0005");
                            }
                        :}
;

call_function ::= ID:id LPAREN arg_list:ar RPAREN   {:  if(debug) System.out.println("\t regla 6c anidada");
                                                        RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),ar); 
                                                    :}
                | ID:id LPAREN RPAREN   {:  if(debug) System.out.println("\t regla 6d anidada");
                                            RESULT = new NodoFuncion(new NodoIdentificador(id.toString())); 
                                        :}
;

function_stmt ::= FUNCTION ID:id LPAREN arg_list:ar RPAREN s_stmt_seq:st RETURN iden:variable END   {:  if(debug) System.out.println("\t regla 14a");
                                                                                                        RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),ar,st,variable);
                                                                                                    :}
                | FUNCTION ID:id LPAREN RPAREN s_stmt_seq:st RETURN iden:variable END   {:  if(debug) System.out.println("\t regla 14b");
                                                                                            RESULT = new NodoFuncion(new NodoIdentificador(id.toString()),st,variable);
                                                                                        :}
;

arg_list ::= arg_list:ar COMMA iden:variable {: if(debug) System.out.println("\t regla 15a"); 
                                                NodoBase hijoActual = ar;
                                                if(hijoActual !=null){
                                                    while(hijoActual.TieneHermano()){
                                                        hijoActual = hijoActual.getHermanoDerecha();
                                                    }
                                                    hijoActual.setHermanoDerecha(variable);
                                                    RESULT=ar;
                                                }else{
                                                    RESULT=variable;
                                                }
                                            :} 
            | iden:variable {: if(debug) System.out.println("\t regla 15b"); 
                                RESULT=variable;
                            :}
;